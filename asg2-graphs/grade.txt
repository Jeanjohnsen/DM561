Grade: 0.00/100.00

9 Deduction(s):

--------------
#1: 20.00 points
Failing test: test_isIsomorphicUsingP:  @points=20 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 111, in test_isIsomorphicUsingP
    self.assertEqual( result, expected )
AssertionError: None != True

source:
    @timeout_decorator.timeout(8)
     def test_isIsomorphicUsingP(self):
         """ @points=20 """
         A = np.array([[0, 1, 1], [1, 0, 0], [1, 0, 0]])
         B = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
         P = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])
         result = isIsomorphicUsingP(A, B, P)
         expected = self.sol_isIsomorphicUsingP(A, B, P)
         self.assertEqual( result, expected )
--------------

--------------
#2: 15.00 points
Failing test: test_isPermutationMatrix: 
        @points=15
        
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 58, in test_isPermutationMatrix
    self.assertEqual( result, expected )
AssertionError: None != True

source:
    @timeout_decorator.timeout(8)
     def test_isPermutationMatrix(self):
         """
         @points=15
         """
         matrix = np.array([[0,1,0],[1,0,0],[0,0,1]])
         result = isPermutationMatrix(matrix)
         expected = self.sol_isPermutationMatrix(matrix)
 
         self.assertEqual( result, expected )
 
         matrix = np.array([[0,1,0],[1,0,0],[0,1,0]])
         result = isPermutationMatrix(matrix)
         expected = self.sol_isPermutationMatrix(matrix)
 
         self.assertEqual( result, expected )
--------------

--------------
#3: 5.00 points
Failing test: test_isPermutationMatrixException1:  @points=5 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 70, in test_isPermutationMatrixException1
    self.assertRaises(TypeError, isPermutationMatrix, arg)
AssertionError: TypeError not raised by isPermutationMatrix

source:
    @timeout_decorator.timeout(8)
     def test_isPermutationMatrixException1(self):
         """ @points=5 """
         arg=np.array([0,0,1])
         self.assertRaises(TypeError, isPermutationMatrix, arg)
--------------

--------------
#4: 5.00 points
Failing test: test_isPermutationMatrixException2:  @points=5 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 76, in test_isPermutationMatrixException2
    self.assertRaises(ValueError, isPermutationMatrix, arg)
AssertionError: ValueError not raised by isPermutationMatrix

source:
    @timeout_decorator.timeout(8)
     def test_isPermutationMatrixException2(self):
         """ @points=5 """
         arg=np.array([[2,0,1],[0,0,1],[0,0,1]])
         self.assertRaises(ValueError, isPermutationMatrix, arg)
--------------

--------------
#5: 1.00 points
Failing test: test_moreThanOneSubgraphTest1:  @points=1 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 151, in test_moreThanOneSubgraphTest1
    self.assertEqual( result, expected )
AssertionError: None != True

source:
    @timeout_decorator.timeout(8)
     def test_moreThanOneSubgraphTest1(self):
         """ @points=1 """
         A = np.array([[0, 1, 1], [1, 0, 0], [1, 0, 0]])
         B = np.array([[0, 1], [1, 0]])
         result = moreThanOneSubgraph(A, B)
         expected = self.sol_moreThanOneSubgraph(A, B)
         self.assertEqual( result, expected )
--------------

--------------
#6: 1.00 points
Failing test: test_moreThanOneSubgraphTest2:  @points=1 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 179, in test_moreThanOneSubgraphTest2
    self.assertEqual( result, expected )
AssertionError: None != False

source:
    @timeout_decorator.timeout(30)
     def test_moreThanOneSubgraphTest2(self):
         """ @points=1 """
         A = np.array([[0,0,0,0,1,0,0,0,0,0],
                       [0,0,0,0,0,1,0,0,0,1],
                       [0,0,0,0,0,0,0,1,0,0],
                       [0,0,0,0,1,0,0,0,0,1],
                       [1,0,0,1,0,0,1,1,0,0],
                       [0,1,0,0,0,0,1,0,0,0],
                       [0,0,0,0,1,1,0,0,1,0],
                       [0,0,1,0,1,0,0,0,1,0],
                       [0,0,0,0,0,0,1,1,0,0],
                       [0,1,0,1,0,0,0,0,0,0]])
         
         B = np.array([[0,0,1,0,0,0,0,0,0],
                       [0,0,1,0,0,1,0,0,0],
                       [1,1,0,0,0,0,0,1,1],
                       [0,0,0,0,1,0,0,0,1],
                       [0,0,0,1,0,1,0,0,0],
                       [0,1,0,0,1,0,0,0,0],
                       [0,0,0,0,0,0,0,1,1],
                       [0,0,1,0,0,0,1,0,0],
                       [0,0,1,1,0,0,1,0,0]])
         
         result = moreThanOneSubgraph(A, B)
         expected = self.sol_moreThanOneSubgraph(A, B)
         self.assertEqual( result, expected )
         
         A = [[0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1],
              [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1],
              [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0],
              [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0],
              [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0],
              [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1],
              [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
              [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
              [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
              [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
              [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
              [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
              [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],
              [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
              [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
              [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0],
              [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1],
              [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0]]
         
         B = [[0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
              [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1],
              [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0],
              [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0],
              [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1],
              [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
              [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0],
              [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],
              [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1],
              [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
              [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0],
              [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1],
              [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1],
              [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0]]
         
         result = moreThanOneSubgraph(A, B)
         expected = self.sol_moreThanOneSubgraph(A, B)
         self.assertEqual( result, expected )
 
         A = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
              [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0],
              [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]
         
         B = [[0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
              [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
              [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
              [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]]
 
         
         result = moreThanOneSubgraph(A, B)
         expected = self.sol_moreThanOneSubgraph(A, B)
         self.assertEqual( result, expected )
         
 
         A = [[0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
              [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0],
              [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
              [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
              [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1],
              [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
              [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1],
              [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
              [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
              [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
              [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1],
              [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
              [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
              [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1],
              [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0],
              [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
              [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1],
              [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0]]
 
         B = [[0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1],
              [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1],
              [1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
              [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1],
              [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1],
              [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0],
              [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0],
              [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
              [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
              [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
              [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]]
 
         result = moreThanOneSubgraph(A, B)
         expected = self.sol_moreThanOneSubgraph(A, B)
         self.assertEqual( result, expected )
--------------

--------------
#7: 14.00 points
Failing test: test_numIsomorphismsTest1:  @points=14 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 126, in test_numIsomorphismsTest1
    self.assertEqual( result, expected )
AssertionError: None != 6

source:
    @timeout_decorator.timeout(8)
     def test_numIsomorphismsTest1(self):
         """ @points=14 """
         A = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])
         B = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])
         result = numIsomorphisms(A, B)
         expected = self.sol_numIsomorphisms(A, B)
         self.assertEqual( result, expected )
--------------

--------------
#8: 14.00 points
Failing test: test_numIsomorphismsTest2:  @points=14 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 136, in test_numIsomorphismsTest2
    self.assertEqual( result, expected )
AssertionError: None != 0

source:
    @timeout_decorator.timeout(8)
     def test_numIsomorphismsTest2(self):
         """ @points=14 """
         A = np.array([[0, 1, 1], [1, 0, 0], [1, 1, 0]])
         B = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])
         result = numIsomorphisms(A, B)
         expected = self.sol_numIsomorphisms(A, B)
         self.assertEqual( result, expected )
--------------

--------------
#9: 25.00 points
Failing test: test_allPermutationMatrices:  @points=25 
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 97, in test_allPermutationMatrices
    correct = self.sol_allPermutationMatrices(result,n)
  File "/usr/local/lib/python3.6/dist-packages/timeout_decorator/timeout_decorator.py", line 81, in new_function
    return function(*args, **kwargs)
  File "test_asg2.py", line 81, in sol_allPermutationMatrices
    for m in matrixList:
TypeError: 'NoneType' object is not iterable

source:
    @timeout_decorator.timeout(8)
     def test_allPermutationMatrices(self):
         """ @points=25 """
         n=2
         result = allPermutationMatrices(n)
         correct = self.sol_allPermutationMatrices(result,n)
         self.assertTrue(correct )
--------------

